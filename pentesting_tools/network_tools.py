from mcp.server.fastmcp import FastMCP
import socket

mcp = FastMCP("network_tools")

@mcp.tool()
async def find_subdomains(domain: str) -> str:
    """Find subdomains using DNS queries."""
    domain = domain.replace('https://', '').replace('http://', '').split('/')[0]
    
    output = f"DNS lookup for {domain}:\n\n"
    
    try:
        # Get IP addresses
        ips = socket.gethostbyname_ex(domain)
        output += f"Main domain: {ips[0]}\n"
        output += f"IPs: {', '.join(ips[2])}\n\n"
    except:
        output += "Main domain lookup failed\n\n"
    
    # Check common subdomains
    common = ['www', 'mail', 'ftp', 'api', 'dev', 'staging', 'admin', 'test']
    output += "Checking common subdomains:\n"
    
    for sub in common:
        try:
            ip = socket.gethostbyname(f'{sub}.{domain}')
            output += f"✓ {sub}.{domain}: {ip}\n"
        except:
            pass
    
    return output

@mcp.tool()
async def scan_ports(domain: str, ports: str = None) -> str:
    """Scan TCP ports on target domain."""
    domain = domain.replace('https://', '').replace('http://', '').split('/')[0]
    
    # Default common ports
    if not ports:
        port_list = [21, 22, 23, 25, 80, 110, 443, 445, 3306, 3389, 8080, 8443]
    else:
        port_list = [int(p.strip()) for p in ports.split(',')]
    
    output = f"Port scan for {domain}:\n\n"
    open_ports = []
    
    # Common service names
    services = {
        21: 'FTP', 22: 'SSH', 23: 'Telnet', 25: 'SMTP',
        80: 'HTTP', 110: 'POP3', 443: 'HTTPS', 445: 'SMB',
        3306: 'MySQL', 3389: 'RDP', 8080: 'HTTP-Alt', 8443: 'HTTPS-Alt'
    }
    
    for port in port_list:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)  # 1 second timeout
        
        try:
            result = sock.connect_ex((domain, port))
            if result == 0:
                service = services.get(port, 'Unknown')
                open_ports.append(f"{port}/{service}")
                output += f"✓ Port {port}: OPEN ({service})\n"
        except:
            pass
        finally:
            sock.close()
    
    if not open_ports:
        output += "No open ports found in checked range\n"
    else:
        output += f"\nSummary: {len(open_ports)} open ports\n"
    
    return output

if __name__ == "__main__":
    mcp.run()