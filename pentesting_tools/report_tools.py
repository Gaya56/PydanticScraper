from mcp.server.fastmcp import FastMCP
import os
from dotenv import load_dotenv
import google.generativeai as genai

load_dotenv()
mcp = FastMCP("report_tools")

# Configure Gemini
genai.configure(api_key=os.getenv('GOOGLE_API_KEY'))
model = genai.GenerativeModel('gemini-1.5-flash')

@mcp.tool()
async def generate_security_report(domain: str, all_findings: str) -> str:
    """Generate AI-powered security report analyzing all findings."""
    
    prompt = f"""Analyze these security findings for {domain} and create a CTF-focused report:

{all_findings}

Generate a markdown report with:
1. Executive Summary (3 sentences max)
2. Critical Findings (prioritized by CTF value)
3. Attack Surface:
   - Open ports with service risks
   - Missing security headers
   - SSL/TLS weaknesses
   - Technology-specific vulnerabilities
4. Recommended CTF Approaches
5. Quick Reference (IPs, subdomains, key ports)

Focus on actionable intelligence for penetration testing."""

    try:
        response = model.generate_content(prompt)
        return f"# Security Report: {domain}\n\n{response.text}"
    except Exception as e:
        return f"Report generation failed: {str(e)}"

if __name__ == "__main__":
    mcp.run()